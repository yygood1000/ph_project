package com.topjet.common.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.topjet.common.db.bean.IMUserBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IMUSER_BEAN".
*/
public class IMUserBeanDao extends AbstractDao<IMUserBean, Long> {

    public static final String TABLENAME = "IMUSER_BEAN";

    /**
     * Properties of entity IMUserBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Avatar = new Property(1, String.class, "avatar", false, "AVATAR");
        public final static Property UserId = new Property(2, String.class, "userId", false, "USER_ID");
        public final static Property Username = new Property(3, String.class, "username", false, "USERNAME");
        public final static Property Nick = new Property(4, String.class, "nick", false, "NICK");
        public final static Property UserPhone = new Property(5, String.class, "userPhone", false, "USER_PHONE");
        public final static Property IsAnonymous = new Property(6, String.class, "isAnonymous", false, "IS_ANONYMOUS");
        public final static Property AvatarKey = new Property(7, String.class, "avatarKey", false, "AVATAR_KEY");
        public final static Property Sex = new Property(8, String.class, "sex", false, "SEX");
        public final static Property Reserve1 = new Property(9, String.class, "reserve1", false, "RESERVE1");
        public final static Property Reserve2 = new Property(10, String.class, "reserve2", false, "RESERVE2");
        public final static Property Reserve3 = new Property(11, String.class, "reserve3", false, "RESERVE3");
    }


    public IMUserBeanDao(DaoConfig config) {
        super(config);
    }
    
    public IMUserBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IMUSER_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"AVATAR\" TEXT," + // 1: avatar
                "\"USER_ID\" TEXT," + // 2: userId
                "\"USERNAME\" TEXT," + // 3: username
                "\"NICK\" TEXT," + // 4: nick
                "\"USER_PHONE\" TEXT," + // 5: userPhone
                "\"IS_ANONYMOUS\" TEXT," + // 6: isAnonymous
                "\"AVATAR_KEY\" TEXT," + // 7: avatarKey
                "\"SEX\" TEXT," + // 8: sex
                "\"RESERVE1\" TEXT," + // 9: reserve1
                "\"RESERVE2\" TEXT," + // 10: reserve2
                "\"RESERVE3\" TEXT);"); // 11: reserve3
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IMUSER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, IMUserBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(2, avatar);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(3, userId);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(4, username);
        }
 
        String nick = entity.getNick();
        if (nick != null) {
            stmt.bindString(5, nick);
        }
 
        String userPhone = entity.getUserPhone();
        if (userPhone != null) {
            stmt.bindString(6, userPhone);
        }
 
        String isAnonymous = entity.getIsAnonymous();
        if (isAnonymous != null) {
            stmt.bindString(7, isAnonymous);
        }
 
        String avatarKey = entity.getAvatarKey();
        if (avatarKey != null) {
            stmt.bindString(8, avatarKey);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(9, sex);
        }
 
        String reserve1 = entity.getReserve1();
        if (reserve1 != null) {
            stmt.bindString(10, reserve1);
        }
 
        String reserve2 = entity.getReserve2();
        if (reserve2 != null) {
            stmt.bindString(11, reserve2);
        }
 
        String reserve3 = entity.getReserve3();
        if (reserve3 != null) {
            stmt.bindString(12, reserve3);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, IMUserBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(2, avatar);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(3, userId);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(4, username);
        }
 
        String nick = entity.getNick();
        if (nick != null) {
            stmt.bindString(5, nick);
        }
 
        String userPhone = entity.getUserPhone();
        if (userPhone != null) {
            stmt.bindString(6, userPhone);
        }
 
        String isAnonymous = entity.getIsAnonymous();
        if (isAnonymous != null) {
            stmt.bindString(7, isAnonymous);
        }
 
        String avatarKey = entity.getAvatarKey();
        if (avatarKey != null) {
            stmt.bindString(8, avatarKey);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(9, sex);
        }
 
        String reserve1 = entity.getReserve1();
        if (reserve1 != null) {
            stmt.bindString(10, reserve1);
        }
 
        String reserve2 = entity.getReserve2();
        if (reserve2 != null) {
            stmt.bindString(11, reserve2);
        }
 
        String reserve3 = entity.getReserve3();
        if (reserve3 != null) {
            stmt.bindString(12, reserve3);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public IMUserBean readEntity(Cursor cursor, int offset) {
        IMUserBean entity = new IMUserBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // avatar
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // username
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // nick
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // userPhone
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // isAnonymous
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // avatarKey
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // sex
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // reserve1
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // reserve2
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // reserve3
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, IMUserBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAvatar(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUsername(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNick(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUserPhone(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsAnonymous(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAvatarKey(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSex(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setReserve1(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setReserve2(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setReserve3(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(IMUserBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(IMUserBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(IMUserBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
