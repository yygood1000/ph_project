package com.topjet.common.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.topjet.common.db.bean.ImageMessageBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IMAGE_MESSAGE_BEAN".
*/
public class ImageMessageBeanDao extends AbstractDao<ImageMessageBean, Long> {

    public static final String TABLENAME = "IMAGE_MESSAGE_BEAN";

    /**
     * Properties of entity ImageMessageBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MessageId = new Property(1, String.class, "messageId", false, "MESSAGE_ID");
        public final static Property ImagePath = new Property(2, String.class, "imagePath", false, "IMAGE_PATH");
        public final static Property ImageRemotePath = new Property(3, String.class, "imageRemotePath", false, "IMAGE_REMOTE_PATH");
        public final static Property Time = new Property(4, long.class, "time", false, "TIME");
        public final static Property ConversationId = new Property(5, String.class, "conversationId", false, "CONVERSATION_ID");
    }


    public ImageMessageBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ImageMessageBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IMAGE_MESSAGE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MESSAGE_ID\" TEXT," + // 1: messageId
                "\"IMAGE_PATH\" TEXT," + // 2: imagePath
                "\"IMAGE_REMOTE_PATH\" TEXT," + // 3: imageRemotePath
                "\"TIME\" INTEGER NOT NULL ," + // 4: time
                "\"CONVERSATION_ID\" TEXT);"); // 5: conversationId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IMAGE_MESSAGE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ImageMessageBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String messageId = entity.getMessageId();
        if (messageId != null) {
            stmt.bindString(2, messageId);
        }
 
        String imagePath = entity.getImagePath();
        if (imagePath != null) {
            stmt.bindString(3, imagePath);
        }
 
        String imageRemotePath = entity.getImageRemotePath();
        if (imageRemotePath != null) {
            stmt.bindString(4, imageRemotePath);
        }
        stmt.bindLong(5, entity.getTime());
 
        String conversationId = entity.getConversationId();
        if (conversationId != null) {
            stmt.bindString(6, conversationId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ImageMessageBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String messageId = entity.getMessageId();
        if (messageId != null) {
            stmt.bindString(2, messageId);
        }
 
        String imagePath = entity.getImagePath();
        if (imagePath != null) {
            stmt.bindString(3, imagePath);
        }
 
        String imageRemotePath = entity.getImageRemotePath();
        if (imageRemotePath != null) {
            stmt.bindString(4, imageRemotePath);
        }
        stmt.bindLong(5, entity.getTime());
 
        String conversationId = entity.getConversationId();
        if (conversationId != null) {
            stmt.bindString(6, conversationId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ImageMessageBean readEntity(Cursor cursor, int offset) {
        ImageMessageBean entity = new ImageMessageBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // messageId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // imagePath
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // imageRemotePath
            cursor.getLong(offset + 4), // time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // conversationId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ImageMessageBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMessageId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImagePath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setImageRemotePath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTime(cursor.getLong(offset + 4));
        entity.setConversationId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ImageMessageBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ImageMessageBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ImageMessageBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
